name: Deploy to QA Environment

concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    branches:
      - "qa"
  push:
    branches:
      - "qa"


env:
  PROJECT_NAME: refined
  BASE_PATH: /var/www/apps/refined
  CURRENT_PATH: /var/www/apps/refined/current
  DEPLOY_BASE_PATH: /var/www/apps/refined/deployments

jobs:
  build-frontend:
    runs-on: [self-hosted, test-runner]
    needs: []
    container:
      image: node:20.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: qa
      - name: Restore frontend cache
        uses: actions/cache@v3
        id: frontend-build-cache
        with:
          path: |
            ./frontend/build
          key: frontend-qa-${{ hashFiles('./frontend/') }}
      - name: write QA config
        if: steps.frontend-build-cache.outputs.cache-hit != 'true'
        uses: DamianReeves/write-file-action@master
        with:
          path: frontend/.env
          contents: ${{ vars.QA_ENV_FRONTEND }}
          write-mode: overwrite
      - name: prepare frontend
        if: steps.frontend-build-cache.outputs.cache-hit != 'true'
        shell: bash -l -e {0}
        run: |
          cd frontend
          yarn
          DISABLE_ESLINT_PLUGIN='true' yarn build
      - name: Save Cache
        id: frontend-build-save
        if: steps.frontend-build-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ./frontend/build
          key: frontend-qa-${{ hashFiles('./frontend/') }}

  deploy-to-qa:
    runs-on: [self-hosted, qa, refined]
    needs: [build-frontend]
    # environment: qa # not available for free private repos
    outputs:
      DEPLOY_NAME: ${{ steps.copy_files.outputs.DEPLOY_NAME }}
      DEPLOY_PATH: ${{ steps.copy_files.outputs.DEPLOY_PATH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: qa
      - name: Copy Files
        id: copy_files
        shell: bash -l -e {0}
        run: |
          export DEPLOY_NAME=$(date +"%Y-%m-%d-%H-%m-%s")
          export DEPLOY_PATH=$DEPLOY_BASE_PATH/$DEPLOY_NAME
          sudo mkdir $DEPLOY_PATH

          echo "DEPLOY_NAME=$DEPLOY_NAME"
          echo "DEPLOY_PATH=$DEPLOY_PATH"

          echo "DEPLOY_NAME=$DEPLOY_NAME" >> "$GITHUB_OUTPUT"
          echo "DEPLOY_PATH=$DEPLOY_PATH" >> "$GITHUB_OUTPUT"
      - name: Restore frontend cache
        uses: actions/cache@v3
        id: frontend-build-cache
        with:
          path: |
            ./frontend/build
          key: frontend-qa-${{ hashFiles('./frontend/') }}
      - name: check frontend cache
        if: steps.frontend-build-cache.outputs.cache-hit != 'true'
        shell: bash -l -e {0}
        run: |
          echo "frontend build for QA was not found. Aborting ..."
          false
      - name: prepare backend code
        shell: bash -l -e {0}
        run: |
          DEPLOY_PATH=${{ steps.copy_files.outputs.DEPLOY_PATH }}
          ln -s $BASE_PATH/shared/env_backend backend/.env
          cd backend
          sudo mkdir -p bootstrap/cache
          sudo chmod -R 777 bootstrap

          sudo su -c "mkdir -p $BASE_PATH/shared/backend_storage/api-docs"
          sudo su -c "cp -R storage/api-docs $BASE_PATH/shared/backend_storage/api-docs"
          rm -rf storage
          ln -s $BASE_PATH/shared/backend_storage storage
          sudo chmod 777 storage
          composer i
      - name: Deploy
        shell: bash -l -e {0}
        run: |
          DEPLOY_PATH=${{ steps.copy_files.outputs.DEPLOY_PATH }}
          sudo cp -R ./* $DEPLOY_PATH
          cd $BASE_PATH
          sudo ln -nfs $DEPLOY_PATH current

          cd current/backend
          sudo php artisan queue:restart
          sudo php artisan migrate
      - name: clean up older deployments
        shell: bash -l -e {0}
        run: |
          cd $BASE_PATH/deployments
          echo "folders to delete:"
          find . -maxdepth 1 -mtime +30 -type d -path './20*' | tail -n +5 | awk '{ print $1; }'
          find . -maxdepth 1 -mtime +30 -type d -path './20*' | tail -n +5 | xargs sudo rm -rf
